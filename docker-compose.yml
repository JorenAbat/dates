version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=${API_URL}
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:5000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
        if [ -d /var/lib/postgresql/data/pgdata ]; then
          echo 'Database already exists, skipping initialization'
        else
          echo 'Initializing database...'
          mkdir -p /var/lib/postgresql/data/pgdata
          initdb -D /var/lib/postgresql/data/pgdata
          pg_ctl -D /var/lib/postgresql/data/pgdata start
          psql -U ${POSTGRES_USER} -c \"CREATE DATABASE ${POSTGRES_DB};\"
          pg_ctl -D /var/lib/postgresql/data/pgdata stop
        fi
        exec postgres -D /var/lib/postgresql/data/pgdata
      "

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: 